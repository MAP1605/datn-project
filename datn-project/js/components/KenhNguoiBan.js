document.addEventListener("DOMContentLoaded", function () {
  // --- CLICK XEM CHI TI·∫æT S·∫¢N PH·∫®M ---
  const productDetailModal = document.getElementById("productDetailModal");
  const productDetailOverlay = document.getElementById("productDetailOverlay");
  const closeProductBtns = document.querySelectorAll(".close-product-modal");

  document.querySelectorAll(".btn-detail-product").forEach(item => {
    item.addEventListener("click", () => {
      const row = item.closest("tr");
      if (!row) return;

      const image = row.querySelector("img")?.src || '';
      document.getElementById("modal-product-image").src = image;
      document.getElementById("modal-product-cover").src = image;

      const getData = (attr) => row.dataset[attr] || '';
      const formatCurrency = (v) => isNaN(v) ? "0ƒë" : Number(v).toLocaleString("vi-VN") + "ƒë";

      document.getElementById("modal-product-name").textContent = getData('name');
      document.getElementById("modal-product-original").textContent = formatCurrency(getData('original'));
      document.getElementById("modal-product-price").textContent = formatCurrency(getData('price'));
      document.getElementById("modal-product-stock").textContent = getData('stock');
      document.getElementById("modal-product-category").textContent = getData('category');
      document.getElementById("modal-product-description").textContent = getData('description');
      document.getElementById("modal-product-brand").textContent = getData('brand');
      document.getElementById("modal-product-origin").textContent = getData('origin');
      document.getElementById("modal-product-storage").textContent = getData('storage');

      productDetailModal.classList.remove("hidden");
      productDetailOverlay.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    });
  });

  [...closeProductBtns, productDetailOverlay].forEach(el => {
    el.addEventListener("click", () => {
      productDetailModal.classList.add("hidden");
      productDetailOverlay.classList.add("hidden");
      document.body.style.overflow = "";
    });
  });

  // --- SIDEBAR SECTION SWITCHING ---
  const sections = {
    order: document.getElementById("order-section"),
    product: document.getElementById("product-section"),
    addProduct: document.querySelector(".Container-ka.product-form-ka"),
    doanhthuSection: document.querySelector(".doanhthu-section"),
    wallet: document.querySelector(".wallet-container")
  };

  const navLinks = {
    "link-all-orders": "order-section",
    "link-all-products": "product-section",
    "link-add-product": "product-form-ka",
    "link-all-vin": "doanhthu-section",
    "link-add-vin": "wallet-container"
  };

  const slategrayLinkIds = Object.keys(navLinks);

  function hideAllSections() {
    Object.values(sections).forEach(section => {
      if (section) section.classList.add("hidden");
    });
  }

  function showSection(id) {
    hideAllSections();
    const section = document.getElementById(id) || document.querySelector(`.${id}`);
    if (section) section.classList.remove("hidden");
  }

  function updateSidebarActive(activeId) {
    slategrayLinkIds.forEach(id => {
      const link = document.getElementById(id);
      if (link) link.classList.remove("active-link");
    });
    const clicked = document.getElementById(activeId);
    if (clicked) clicked.classList.add("active-link");
  }

  // G√°n s·ª± ki·ªán click cho sidebar links
  slategrayLinkIds.forEach(linkId => {
    const button = document.getElementById(linkId);
    if (button) {
      button.addEventListener("click", function (e) {
        e.preventDefault();
        showSection(navLinks[linkId]);
        updateSidebarActive(linkId);
      });
    }
  });

  // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã
  showSection("order-section");

  // --- CHECKBOX "CH·ªåN T·∫§T C·∫¢" ---
  const selectAllCheckbox = document.getElementById("select-all-orders");
  const rowCheckboxes = document.querySelectorAll("#order-list input[type='checkbox']");

  if (selectAllCheckbox && rowCheckboxes.length) {
    selectAllCheckbox.addEventListener("change", () => {
      const isChecked = selectAllCheckbox.checked;
      rowCheckboxes.forEach(cb => cb.checked = isChecked);
    });

    rowCheckboxes.forEach(cb => {
      cb.addEventListener("change", () => {
        selectAllCheckbox.checked = [...rowCheckboxes].every(cb => cb.checked);
      });
    });
  }

  // --- TABS L·ªåC ƒê∆†N H√ÄNG ---
  const orderTabs = document.querySelectorAll(".order-tabs .tab");
  const orderRows = document.querySelectorAll("#order-list tr");

  orderTabs.forEach(tab => {
    tab.addEventListener("click", () => {
      orderTabs.forEach(t => t.classList.remove("active"));
      tab.classList.add("active");
      const selected = tab.getAttribute("data-filter");
      orderRows.forEach(row => {
        const status = row.getAttribute("data-status");
        row.style.display = selected === "T·∫•t c·∫£" || selected === status ? "" : "none";
      });
    });
  });

  // --- TABS L·ªåC S·∫¢N PH·∫®M ---
  const productTabs = document.querySelectorAll(".product-tabs .tab");
  const productRows = document.querySelectorAll("#product-list tr");

  productTabs.forEach(tab => {
    tab.addEventListener("click", () => {
      productTabs.forEach(t => t.classList.remove("active"));
      tab.classList.add("active");
      const selected = tab.getAttribute("data-filter");
      productRows.forEach(row => {
        const status = row.getAttribute("data-status");
        row.style.display = selected === "T·∫•t c·∫£ s·∫£n ph·∫©m" || selected === status ? "" : "none";
      });
    });
  });

  // --- T√åM KI·∫æM S·∫¢N PH·∫®M ---
  const searchInput = document.querySelector(".input-search");
  if (searchInput) {
    searchInput.addEventListener("input", () => {
      const keyword = searchInput.value.toLowerCase().trim();
      productRows.forEach(row => {
        const name = row.getAttribute("data-name").toLowerCase();
        row.style.display = name.includes(keyword) ? "" : "none";
      });
    });
  }

  // --- TH√äM S·∫¢N PH·∫®M M·ªöI ---
  const btnAddProduct = document.querySelector(".btn-add-product");
  const formAddProduct = document.querySelector(".Container-ka.product-form-ka");
  const productSection = document.getElementById("product-section");

  if (btnAddProduct && formAddProduct && productSection) {
    btnAddProduct.addEventListener("click", () => {
      productSection.classList.add("hidden");
      formAddProduct.classList.remove("hidden");
      window.scrollTo({ top: formAddProduct.offsetTop - 100, behavior: "smooth" });
    });
  }

  // --- N√öT H·ª¶Y TH√äM ---
  const btnCancelAdd = document.querySelector(".Container-ka .Cancel");
  if (btnCancelAdd) {
    btnCancelAdd.addEventListener("click", () => {
      showSection("product-section");
    });
  }

  // --- N√öT QUAY L·∫†I CHI TI·∫æT SP ---
  const btnQuayLaiChiTiet = document.querySelector(".Container-Chitiet .Submit");
  if (btnQuayLaiChiTiet) {
    btnQuayLaiChiTiet.addEventListener("click", () => {
      showSection("product-section");
    });
  }

  // --- N√öT ƒê√ìNG MODAL S·ª¨A SP ---
  const btnCloseEdit = document.getElementById("closeEditProduct");
  if (btnCloseEdit) {
    btnCloseEdit.addEventListener("click", () => {
      showSection("product-section");
    });
  }
});




document.addEventListener("DOMContentLoaded", function () {
  const productList = document.getElementById("product-list");
  const formEditProduct = document.querySelector(".Container-sua");

  // X·ª≠ l√Ω x√≥a s·∫£n ph·∫©m üóë
  productList.addEventListener("click", function (e) {
    if (e.target.classList.contains("btn-delete-product")) {
      const row = e.target.closest("tr");
      if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?")) {
        row.remove();
      }
    }

  });
});
document.querySelector(".Container-sua .Cancel").addEventListener("click", () => {
  document.querySelector(".Container-sua").classList.add("hidden");
});

document.addEventListener("DOMContentLoaded", function () {
  const tabs = document.querySelectorAll(".statistic-header .tab");
  const rows = document.querySelectorAll(".statistic-table tbody tr");

  tabs.forEach(tab => {
    tab.addEventListener("click", function () {
      // B·ªè active c≈©
      tabs.forEach(t => t.classList.remove("active"));
      tab.classList.add("active");

      const selected = tab.textContent.trim(); // "Ch∆∞a thanh to√°n" ho·∫∑c "ƒê√£ thanh to√°n"

      rows.forEach(row => {
        const status = row.children[1].textContent.trim(); // l·∫•y n·ªôi dung c·ªôt tr·∫°ng th√°i

        if (
          (selected === "Ch∆∞a thanh to√°n" && status === "Ch∆∞a ho√†n th√†nh") ||
          (selected === "ƒê√£ thanh to√°n" && status === "ƒê√£ ho√†n th√†nh")
        ) {
          row.style.display = "";
        } else {
          row.style.display = "none";
        }
      });
    });
  });
});
document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.querySelector(".search-input");
  const rows = document.querySelectorAll(".statistic-table tbody tr");

  searchInput.addEventListener("input", function () {
    const keyword = searchInput.value.trim().toLowerCase();

    rows.forEach(row => {
      // T√¨m theo to√†n b·ªô n·ªôi dung trong c·ªôt "ƒê∆°n h√†ng"
      const orderInfo = row.querySelector("td").innerText.toLowerCase();

      if (orderInfo.includes(keyword)) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    });
  });
});

document.addEventListener("DOMContentLoaded", function () {
  function updateUnpaidTotal() {
    const rows = document.querySelectorAll(".statistic-table tbody tr");
    let total = 0;

    rows.forEach(row => {
      const status = row.children[1].textContent.trim(); // Tr·∫°ng th√°i
      const amountText = row.children[3].textContent.trim(); // S·ªë ti·ªÅn

      if (status === "Ch∆∞a ho√†n th√†nh") {
        // X√≥a ‚Ç´, d·∫•u . ho·∫∑c ,
        const cleaned = amountText.replace(/[‚Ç´,.]/g, '').replace(/\s/g, '');
        const value = parseInt(cleaned, 10);

        if (!isNaN(value)) {
          total += value;
        }
      }
    });

    // Hi·ªÉn th·ªã l·∫°i d∆∞·ªõi d·∫°ng VNƒê c√≥ d·∫•u .
    document.getElementById("total-unpaid-amount").textContent = formatVND(total) + "‚Ç´";
  }

  function formatVND(number) {
    return number.toLocaleString("vi-VN");
  }

  // G·ªçi h√†m ngay khi trang load
  updateUnpaidTotal();
});
// ƒë√£ thanh to√°n tu·∫ßn n√†y 
document.addEventListener("DOMContentLoaded", function () {
  function formatVND(number) {
    return number.toLocaleString("vi-VN");
  }

  function updateUnpaidAndPaid() {
    const rows = document.querySelectorAll(".statistic-table tbody tr");

    let totalUnpaid = 0;
    let totalPaidThisWeek = 0;

    rows.forEach(row => {
      const status = row.children[1].textContent.trim(); // Tr·∫°ng th√°i
      const amountText = row.children[3].textContent.trim(); // S·ªë ti·ªÅn

      // L√†m s·∫°ch ti·ªÅn
      const cleaned = amountText.replace(/[‚Ç´,.]/g, '').replace(/\s/g, '');
      const value = parseInt(cleaned, 10);

      if (!isNaN(value)) {
        if (status === "Ch∆∞a ho√†n th√†nh") {
          totalUnpaid += value;
        } else if (status === "ƒê√£ ho√†n th√†nh") {
          totalPaidThisWeek += value;
        }
      }
    });

    // C·∫≠p nh·∫≠t DOM
    const unpaidEl = document.getElementById("total-unpaid-amount");
    const paidEl = document.getElementById("paid-this-week");

    if (unpaidEl) unpaidEl.textContent = formatVND(totalUnpaid) + "‚Ç´";
    if (paidEl) paidEl.textContent = formatVND(totalPaidThisWeek) + "‚Ç´";
  }

  // G·ªçi khi trang load
  updateUnpaidAndPaid();
});


//thanh to√°n t·ªïng 
function parseCurrency(text) {
  return parseInt(text.replace(/[‚Ç´.,]/g, '').replace(/\s/g, '')) || 0;
}

function formatCurrency(num) {
  return num.toLocaleString('vi-VN') + "‚Ç´";
}

function updateTotalAllAmount() {
  const cells = document.querySelectorAll(".amount-cell");
  let total = 0;

  cells.forEach(cell => {
    total += parseCurrency(cell.textContent);
  });

  const totalElement = document.getElementById("total-all-amount");
  if (totalElement) {
    totalElement.textContent = formatCurrency(total);
  }
}

document.addEventListener("DOMContentLoaded", updateTotalAllAmount);
// h√¨nh ·∫£nh c·ªßa ph·∫ßn th√™m s·∫£n ph·∫©m 
document.addEventListener("DOMContentLoaded", function () {
  // ·∫¢nh s·∫£n ph·∫©m
  const productImageBox = document.getElementById("product-image-box");
  const productImageInput = document.getElementById("product-image-input");
  const productImagePreview = document.getElementById("product-image-preview");

  productImageBox.addEventListener("click", function () {
    productImageInput.click();
  });

  productImageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        productImagePreview.src = e.target.result;
        productImagePreview.style.display = "block";
        productImageBox.querySelector(".img-text").style.display = "none";
      };
      reader.readAsDataURL(file);
    }
  });

  // ·∫¢nh b√¨a
  const coverImageBox = document.getElementById("cover-image-box");
  const coverImageInput = document.getElementById("cover-image-input");
  const coverImagePreview = document.getElementById("cover-image-preview");

  coverImageBox.addEventListener("click", function () {
    coverImageInput.click();
  });

  coverImageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        coverImagePreview.src = e.target.result;
        coverImagePreview.style.display = "block";
        coverImageBox.querySelector(".img-text").style.display = "none";
      };
      reader.readAsDataURL(file);
    }
  });
});



document.addEventListener("DOMContentLoaded", function () {
  const detailButtons = document.querySelectorAll('.btn-view-order-detail');
  const modal = document.getElementById('orderDetailModal');
  const closeModal = document.getElementById('closeOrderModal');
  const modalSubmit = modal.querySelector('.modal__submit');

  // M·ªü modal khi b·∫•m n√∫t Chi ti·∫øt
  detailButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      modal.classList.remove('hidden');
    });
  });

  // ƒê√≥ng modal khi b·∫•m d·∫•u √ó ho·∫∑c n√∫t ƒê√≥ng
  closeModal.addEventListener('click', () => {
    modal.classList.add('hidden');
  });

  modalSubmit.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  // ƒê√≥ng modal khi click ngo√†i modal
  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.display = 'none';
    }
  });
});

document.addEventListener("DOMContentLoaded", function () {
  const toggleBtn = document.getElementById("sidebar-toggle");
  const sidebar = document.getElementById("sidebar");

  if (toggleBtn && sidebar) {
    toggleBtn.addEventListener("click", function () {
      sidebar.classList.toggle("collapsed");
    });
  }
});
document.addEventListener("DOMContentLoaded", function () {
  const toggleBtn = document.getElementById("sidebar-toggle");
  const sidebar = document.getElementById("sidebar");

  toggleBtn.addEventListener("click", () => {
    sidebar.classList.toggle("show");
  });
});
document.addEventListener("DOMContentLoaded", function () {
  const detailButtons = document.querySelectorAll('.btn-view-order-detail');
  const modal = document.querySelector('#orderDetailModal');
  const overlay = document.querySelector('.modal-overlay');
  const closeBtns = modal.querySelectorAll('.modal__button, .modal__close');

  detailButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      modal.classList.add('show');
      overlay.classList.remove('hidden');
    });
  });

  closeBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      modal.classList.remove('show');
      overlay.classList.add('hidden');
    });
  });

  // Click ngo√†i ƒë·ªÉ ƒë√≥ng modal
  overlay.addEventListener('click', () => {
    modal.classList.remove('show');
    overlay.classList.add('hidden');
  });
});

document.addEventListener('DOMContentLoaded', function () {
  const modal = document.getElementById('orderDetailModal');
  const overlay = document.getElementById('orderDetailOverlay');
  const openBtns = document.querySelectorAll('.btn-view-order-detail');
  const closeBtns = document.querySelectorAll('.close-order-modal, .btn-close-modal');

  openBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      // G√°n n·ªôi dung modal n·∫øu c·∫ßn (v√≠ d·ª• t·ª´ data-order)
      modal.classList.remove('hidden');
      overlay.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // kho√° cu·ªôn n·ªÅn
    });
  });

  closeBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      modal.classList.add('hidden');
      overlay.classList.add('hidden');
      document.body.style.overflow = ''; // m·ªü l·∫°i cu·ªôn n·ªÅn
    });
  });

  overlay.addEventListener('click', () => {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
    document.body.style.overflow = '';
  });
});


// ƒë∆°n h√†ng
document.addEventListener("DOMContentLoaded", function () {
  const selectAll = document.getElementById("select-all-orders");
  const checkboxes = document.querySelectorAll("#order-list .order-checkbox");

  if (selectAll) {
    selectAll.addEventListener("change", function () {
      checkboxes.forEach(cb => {
        cb.checked = this.checked;
      });
    });
  }
});


// ph·∫ßn menu 
document.addEventListener("DOMContentLoaded", function () {
  const toggleBtn = document.getElementById("sidebar-toggle");
  const sidebar = document.getElementById("sidebar");

  toggleBtn.addEventListener("click", () => {
    sidebar.classList.toggle("active");
  });

  // (Tu·ª≥ ch·ªçn) ƒê√≥ng sidebar khi ch·ªçn 1 m·ª•c
  document.querySelectorAll('.seller-sidebar__link').forEach(link => {
    link.addEventListener('click', () => {
      sidebar.classList.remove('active');
    });
  });
});


// ph·∫ßn t√≠ch t·∫•t c·∫£ ph·∫ßn checkbox  c·ªßa t·∫•t c·∫£ ƒë∆°n h√†ng
document.addEventListener("DOMContentLoaded", function () {
  const selectAllCheckbox = document.getElementById("select-all-orders");
  const orderCheckboxes = document.querySelectorAll('#order-list input[type="checkbox"]');

  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener("change", function () {
      orderCheckboxes.forEach(cb => {
        cb.checked = selectAllCheckbox.checked;
      });
    });
  }
});

// ph·∫ßn t√≠ch t·∫•t c·∫£ ph·∫ßn c·ªßa checkbox c·ªßa t·∫•t c·∫£ ƒë∆°n h√†ng 
document.addEventListener("DOMContentLoaded", function () {
  const selectAllProducts = document.getElementById("select-all-products");
  const productCheckboxes = document.querySelectorAll('#product-list input[type="checkbox"]');

  if (selectAllProducts) {
    selectAllProducts.addEventListener("change", function () {
      productCheckboxes.forEach(cb => {
        cb.checked = selectAllProducts.checked;
      });
    });
  }
});



// khu v·ª±c ph·∫ßn hi·ªÉn th·ªã show ph·∫ßn c·ªßa chi ti·∫øt ƒë∆°n h√†ng 
document.addEventListener('DOMContentLoaded', function () {
  const productDetailModal = document.getElementById('productDetailModal');
  const productDetailOverlay = document.getElementById('productDetailOverlay');
  const closeProductBtns = document.querySelectorAll('.close-product-modal');

  const productItems = document.querySelectorAll('.btn-detail-product');

  productItems.forEach(item => {
    item.addEventListener('click', () => {
      const row = item.closest('tr');

      document.getElementById('modal-product-image').src = row.querySelector('img').src;
      document.getElementById('modal-product-cover').src = row.querySelector('img').src;
      document.getElementById('modal-product-name').textContent = row.querySelector('.cell-name')?.textContent || '';
      document.getElementById('modal-product-original').textContent = row.dataset.original || '';
      document.getElementById('modal-product-price').textContent = row.querySelector('.cell-price')?.textContent || '';
      document.getElementById('modal-product-stock').textContent = row.querySelector('.cell-stock')?.textContent || '';
      document.getElementById('modal-product-category').textContent = 'ƒêi·ªán tho·∫°i'; // tu·ª≥ ch·ªânh theo data
      document.getElementById('modal-product-description').textContent = 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao';
      document.getElementById('modal-product-brand').textContent = row.querySelector('.cell-brand')?.textContent || '';
      document.getElementById('modal-product-origin').textContent = 'Vi·ªát Nam';
      document.getElementById('modal-product-storage').textContent = 'Kho t·ªïng';

      productDetailModal.classList.remove('hidden');
      productDetailOverlay.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    });
  });

  closeProductBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      productDetailModal.classList.add('hidden');
      productDetailOverlay.classList.add('hidden');
      document.body.style.overflow = '';
    });
  });

  productDetailOverlay.addEventListener('click', () => {
    productDetailModal.classList.add('hidden');
    productDetailOverlay.classList.add('hidden');
    document.body.style.overflow = '';
  });
});

// Khi ·∫•n üõ† (d·∫°ng MODAL) s·∫Ω m·ªü modal s·ª≠a s·∫£n ph·∫©m
document.addEventListener("DOMContentLoaded", () => {
  const formContainer = document.querySelector(".Container-sua");
  let currentEditingRow = null; // d√≤ng ƒëang s·ª≠a

  const editBtns = document.querySelectorAll(".btn-edit-product");
  editBtns.forEach(btn => {
    btn.addEventListener("click", () => {
      const row = btn.closest("tr");
      currentEditingRow = row;

      // ƒê·ªï d·ªØ li·ªáu t·ª´ d√≤ng v√†o form
      document.getElementById("edit-name").value = row.dataset.name || '';
      document.getElementById("edit-original-price").value = row.dataset.original || '';
      document.getElementById("edit-price").value = row.dataset.price || '';
      document.getElementById("edit-stock").value = row.dataset.stock || '';
      document.getElementById("edit-category").value = row.dataset.category || '';
      document.getElementById("edit-description").value = row.dataset.description || '';
      document.getElementById("edit-brand").value = row.dataset.brand || '';
      document.getElementById("edit-origin").value = row.dataset.origin || '';
      document.getElementById("edit-storage").value = row.dataset.storage || '';

      // Hi·ªán form
      formContainer.classList.remove("hidden");
      formContainer.scrollIntoView({ behavior: "smooth" });
    });
  });

  // H·ªßy
  document.querySelector(".Cancel").addEventListener("click", () => {
    formContainer.classList.add("hidden");
  });

  // N√∫t C·∫≠p nh·∫≠t
document.querySelector(".Update").addEventListener("click", () => {
  if (!currentEditingRow) return;

  // 1. L·∫•y gi√° tr·ªã t·ª´ form
  const name = document.getElementById("edit-name").value;
  const original = document.getElementById("edit-original-price").value;
  const price = document.getElementById("edit-price").value;
  const stock = document.getElementById("edit-stock").value;
  const category = document.getElementById("edit-category").value;
  const description = document.getElementById("edit-description").value;
  const brand = document.getElementById("edit-brand").value;
  const origin = document.getElementById("edit-origin").value;
  const storage = document.getElementById("edit-storage").value;

  // 2. C·∫≠p nh·∫≠t thu·ªôc t√≠nh data-* trong <tr>
  currentEditingRow.dataset.name = name;
  currentEditingRow.dataset.original = original;
  currentEditingRow.dataset.price = price;
  currentEditingRow.dataset.stock = stock;
  currentEditingRow.dataset.category = category;
  currentEditingRow.dataset.description = description;
  currentEditingRow.dataset.brand = brand;
  currentEditingRow.dataset.origin = origin;
  currentEditingRow.dataset.storage = storage;

  // 3. C·∫≠p nh·∫≠t lu√¥n ph·∫ßn hi·ªÉn th·ªã trong b·∫£ng HTML (d·ª±a v√†o class t·ª´ng <td>)
  currentEditingRow.querySelector(".cell-name").innerText = name;
  currentEditingRow.querySelector(".cell-stock").innerText = stock;
  currentEditingRow.querySelector(".cell-price").innerText = parseInt(price).toLocaleString() + "ƒë";
  currentEditingRow.querySelector(".cell-brand").innerText = brand;

  // ‚úÖ N·∫øu c√≥ th√™m c√°c c·ªôt kh√°c th√¨ c·∫≠p nh·∫≠t th√™m t∆∞∆°ng t·ª± ·ªü ƒë√¢y

  // 4. ·∫®n form s·ª≠a l·∫°i
  document.querySelector(".Container-sua").classList.add("hidden");
  currentEditingRow = null;
});
});
const formContainer = document.getElementById("editProductModal");
const closeModalBtn = document.getElementById("closeEditProduct");
const cancelBtn = document.querySelector(".Cancel");

editBtns.forEach(btn => {
  btn.addEventListener("click", () => {
    const row = btn.closest("tr");
    currentEditingRow = row;

    // ƒê·ªï d·ªØ li·ªáu
    document.getElementById("edit-name").value = row.dataset.name || '';
    document.getElementById("edit-original-price").value = row.dataset.original || '';
    document.getElementById("edit-price").value = row.dataset.price || '';
    document.getElementById("edit-stock").value = row.dataset.stock || '';
    document.getElementById("edit-category").value = row.dataset.category || '';
    document.getElementById("edit-description").value = row.dataset.description || '';
    document.getElementById("edit-brand").value = row.dataset.brand || '';
    document.getElementById("edit-origin").value = row.dataset.origin || '';
    document.getElementById("edit-storage").value = row.dataset.storage || '';

    // M·ªü modal
    formContainer.classList.add("show");
  });
});

// ƒê√≥ng modal
closeModalBtn.addEventListener("click", () => formContainer.classList.remove("show"));
cancelBtn.addEventListener("click", () => formContainer.classList.remove("show"));


// h√¨nh ·∫£nh c·ªßa ph·∫ßn th√™m s·∫£n ph·∫©m 

formContainer.classList.remove("hidden"); // ‚Üí hi·ªán ra gi·ªØa m√†n
formContainer.classList.add("hidden"); // ‚Üí ·∫©n

document.addEventListener("DOMContentLoaded", () => {
  const productModal = document.getElementById("productDetailModal");
  const overlay = document.getElementById("productDetailOverlay");
  const closeBtns = document.querySelectorAll(".close-product-modal");
  
  // B·∫Øt t·∫•t c·∫£ th√†nh ph·∫ßn c√≥ class btn-detail-product
  document.querySelectorAll(".product-detail-trigger").forEach(item => {
    item.addEventListener("click", () => {
      const row = item.closest("tr");
      if (!row) return;
  
      const getData = (attr) => row.dataset[attr] || '';
      const formatCurrency = (v) => isNaN(v) ? "0ƒë" : Number(v).toLocaleString("vi-VN") + "ƒë";
  
      document.getElementById("modal-product-name").textContent = getData('name');
      document.getElementById("modal-product-original").textContent = formatCurrency(getData('original'));
      document.getElementById("modal-product-price").textContent = formatCurrency(getData('price'));
      document.getElementById("modal-product-stock").textContent = getData('stock');
      document.getElementById("modal-product-category").textContent = getData('category');
      document.getElementById("modal-product-description").textContent = getData('description');
      document.getElementById("modal-product-brand").textContent = getData('brand');
      document.getElementById("modal-product-origin").textContent = getData('origin');
      document.getElementById("modal-product-storage").textContent = getData('storage');
  
      document.getElementById("modal-product-image").src = row.querySelector("img")?.src || '';
      document.getElementById("modal-product-cover").src = row.querySelector("img")?.src || '';
  
      document.getElementById("productDetailModal").classList.remove("hidden");
      document.getElementById("productDetailOverlay").classList.remove("hidden");
      document.body.style.overflow = "hidden";
    });
  });
  

  // ƒê√≥ng modal
  closeBtns.forEach(btn => {
    btn.addEventListener("click", () => {
      productModal.classList.add("hidden");
      overlay.classList.add("hidden");
      document.body.style.overflow = "";
    });
  });

  overlay.addEventListener("click", () => {
    productModal.classList.add("hidden");
    overlay.classList.add("hidden");
    document.body.style.overflow = "";
  });
});
